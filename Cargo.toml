[package]
name = "sandy-factry"
version = "0.1.0"
authors = ["Louis Weigel"]
license = "MIT OR Apache-2.0"
description = "A game about building a factory?"
readme = "Readme.md"
homepage = "https://github.com/TheBlckbird/sandy-factry"
repository = "https://github.com/TheBlckbird/sandy-factry"
keywords = ["gaming", "factory-builder"]
categories = ["games"]
edition = "2024"

[dependencies]
bevy.workspace = true
bevy_ecs_tilemap.workspace = true
petgraph.workspace = true
image = "0.25"
noise = "0.9"
rand = "0.9"
winit = "0.30"
sandy_factry_helpers = { path = "./crates/sandy_factry_helpers" }
sandy_factry_macros = { path = "./crates/sandy_factry_macros" }
itertools.workspace = true
bevy_pkv = "0.13.0"
serde.workspace = true
strum.workspace = true
strum_macros.workspace = true
typetag = "0.2.20"
# Set max log levels. This helps avoid unwanted low-severity log spam, which can affect performance.
log = { version = "0.4", features = [
    "max_level_debug",
    "release_max_level_warn",
] }
tracing = { version = "0.1", features = [
    "max_level_debug",
    "release_max_level_warn",
] }
as-any.workspace = true
dyn-clone.workspace = true


[lints]
workspace = true


[workspace]
members = [".", "crates/*"]

[workspace.dependencies]
bevy = { version = "0.16", features = ["file_watcher"] }
bevy_ecs_tilemap = { version = "0.16", features = ["serde"] }
petgraph = "0.8"
itertools = "0.14"
serde = { version = "1.0", features = ["derive"] }
strum = "0.27"
strum_macros = "0.27"
as-any = "0.3"
dyn-clone = "1.0"

[workspace.lints.clippy]
too_many_arguments = "allow"
type_complexity = "allow"
unwrap_used = "warn"


# Enable a small amount of optimization in the dev profile.
[profile.dev]
opt-level = 1

# Enable a large amount of optimization in the dev profile for dependencies.
[profile.dev.package."*"]
opt-level = 3

# Remove expensive debug assertions due to <https://github.com/bevyengine/bevy/issues/14291>
[profile.dev.package.wgpu-types]
debug-assertions = false

[profile.release]
# Compile the entire crate as one unit.
# Slows compile times, marginal improvements.
codegen-units = 1
# Do a second optimization pass over the entire program, including dependencies.
# Slows compile times, marginal improvements.
lto = "thin"
